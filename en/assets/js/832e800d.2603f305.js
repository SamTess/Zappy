"use strict";(self.webpackChunkdocs_docusaurus=self.webpackChunkdocs_docusaurus||[]).push([[8539],{9268:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"development-guide","title":"Development Guide","description":"This guide provides specific information for developers contributing to the Zappy project. It covers development standards, workflows, and technical references tailored to this project.","source":"@site/docs/development-guide.md","sourceDirName":".","slug":"/development-guide","permalink":"/Zappy/en/docs/development-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/Epitech/Zappy/tree/main/docs/docusaurus/docs/development-guide.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"System Architecture","permalink":"/Zappy/en/docs/architecture"},"next":{"title":"Server Architecture and Implementation","permalink":"/Zappy/en/docs/server/server-overview"}}');var t=i(4848),r=i(8453);const a={sidebar_position:3},l="Development Guide",o={},c=[{value:"Environment Setup",id:"environment-setup",level:2},{value:"Technical Requirements",id:"technical-requirements",level:3},{value:"Development Workflow",id:"development-workflow",level:2},{value:"Git Branching Strategy",id:"git-branching-strategy",level:3},{value:"Git Workflow",id:"git-workflow",level:3},{value:"Code Standards",id:"code-standards",level:2},{value:"C/C++ Conventions",id:"cc-conventions",level:3},{value:"Python Conventions",id:"python-conventions",level:3},{value:"Component Integration",id:"component-integration",level:2},{value:"Server-AI Integration",id:"server-ai-integration",level:3},{value:"Server-GUI Integration",id:"server-gui-integration",level:3},{value:"Dynamic Library System",id:"dynamic-library-system",level:3},{value:"Testing Strategy",id:"testing-strategy",level:2},{value:"Unit Testing",id:"unit-testing",level:3},{value:"Integration Testing",id:"integration-testing",level:3},{value:"Memory Analysis",id:"memory-analysis",level:3},{value:"Documentation",id:"documentation",level:2},{value:"Code Documentation",id:"code-documentation",level:3},{value:"Building Documentation",id:"building-documentation",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"development-guide",children:"Development Guide"})}),"\n",(0,t.jsx)(n.p,{children:"This guide provides specific information for developers contributing to the Zappy project. It covers development standards, workflows, and technical references tailored to this project."}),"\n",(0,t.jsx)(n.h2,{id:"environment-setup",children:"Environment Setup"}),"\n",(0,t.jsx)(n.h3,{id:"technical-requirements",children:"Technical Requirements"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"System:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Linux (Ubuntu 20.04+ recommended)"}),"\n",(0,t.jsx)(n.li,{children:"GCC 9.0+ or Clang 10.0+"}),"\n",(0,t.jsx)(n.li,{children:"Python 3.8+"}),"\n",(0,t.jsx)(n.li,{children:"Make 4.0+"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Library Dependencies:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Core dependencies\nsudo apt install build-essential cmake git python3-dev python3-pip\nsudo apt install libgl1-mesa-dev libxrandr-dev libxinerama-dev\nsudo apt install libxcursor-dev libxi-dev libxext-dev\n\n# Development tools\nsudo apt install valgrind gdb doxygen graphviz\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Python Dependencies:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cd src/AI\npip3 install -r requirements.txt\n"})}),"\n",(0,t.jsx)(n.h2,{id:"development-workflow",children:"Development Workflow"}),"\n",(0,t.jsx)(n.h3,{id:"git-branching-strategy",children:"Git Branching Strategy"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"main"}),": Stable release branch"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"develop"}),": Main development branch"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"feature/xxx"}),": Feature branches"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"hotfix/xxx"}),": Urgent fixes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"release/xxx"}),": Release preparation"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"git-workflow",children:"Git Workflow"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Create new feature\ngit checkout develop\ngit pull origin develop\ngit checkout -b feature/new-feature\n\n# Development...\ngit add .\ngit commit -m "feat: add new feature"\n\n# Push and create Pull Request\ngit push origin feature/new-feature\n# Create PR to develop branch\n'})}),"\n",(0,t.jsx)(n.h2,{id:"code-standards",children:"Code Standards"}),"\n",(0,t.jsx)(n.h3,{id:"cc-conventions",children:"C/C++ Conventions"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Style:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Indentation: 4 spaces"}),"\n",(0,t.jsxs)(n.li,{children:["Function names: ",(0,t.jsx)(n.code,{children:"snake_case"})]}),"\n",(0,t.jsxs)(n.li,{children:["Variable names: ",(0,t.jsx)(n.code,{children:"snake_case"})]}),"\n",(0,t.jsxs)(n.li,{children:["Structure names: ",(0,t.jsx)(n.code,{children:"snake_case_t"})]}),"\n",(0,t.jsxs)(n.li,{children:["Class names: ",(0,t.jsx)(n.code,{children:"PascalCase"})]}),"\n",(0,t.jsxs)(n.li,{children:["Constants: ",(0,t.jsx)(n.code,{children:"UPPER_CASE"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"C Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:"/**\n * @brief Initialize a player\n * @param player Pointer to player structure\n * @param team_name Team name\n * @return 0 on success, -1 on error\n */\nint init_player(player_t *player, const char *team_name)\n{\n    if (!player || !team_name)\n        return -1;\n    \n    player->x = 0;\n    player->y = 0;\n    player->level = 1;\n    player->team_name = strdup(team_name);\n    \n    return 0;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"C++ Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"/**\n * @brief Texture management class\n */\nclass TextureManager {\nprivate:\n    std::unordered_map<std::string, Texture> m_textures;\n\npublic:\n    /**\n     * @brief Load a texture from file\n     * @param filename Path to texture file\n     * @return Texture ID or -1 on error\n     */\n    int loadTexture(const std::string& filename);\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"python-conventions",children:"Python Conventions"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Style:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"PEP 8 compliance"}),"\n",(0,t.jsxs)(n.li,{children:["Function names: ",(0,t.jsx)(n.code,{children:"snake_case"})]}),"\n",(0,t.jsxs)(n.li,{children:["Variable names: ",(0,t.jsx)(n.code,{children:"snake_case"})]}),"\n",(0,t.jsxs)(n.li,{children:["Class names: ",(0,t.jsx)(n.code,{children:"PascalCase"})]}),"\n",(0,t.jsxs)(n.li,{children:["Constants: ",(0,t.jsx)(n.code,{children:"UPPER_CASE"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class DecisionManager:\n    """\n    Manages AI decision making processes\n    """\n    def __init__(self, agent):\n        self.agent = agent\n        self.behaviors = {\n            "Dyson": DysonBehavior(),\n            "Explorer": ExplorerBehavior()\n        }\n    \n    def select_behavior(self, state):\n        """\n        Select appropriate behavior based on agent state\n        \n        Args:\n            state: Current agent state\n            \n        Returns:\n            Selected behavior object\n        """\n        if state.food < 5:\n            return self.behaviors["Dyson"]\n        return self.behaviors["Explorer"]\n'})}),"\n",(0,t.jsx)(n.h2,{id:"component-integration",children:"Component Integration"}),"\n",(0,t.jsx)(n.h3,{id:"server-ai-integration",children:"Server-AI Integration"}),"\n",(0,t.jsx)(n.p,{children:"The AI clients communicate with the server using the documented protocol. Key integration points:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Connection handshake sequence"}),"\n",(0,t.jsx)(n.li,{children:"Command processing pipeline"}),"\n",(0,t.jsx)(n.li,{children:"Response parsing"}),"\n",(0,t.jsx)(n.li,{children:"State tracking"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"server-gui-integration",children:"Server-GUI Integration"}),"\n",(0,t.jsx)(n.p,{children:"The GUI connects as a special observer client. Integration focuses on:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Initial state synchronization"}),"\n",(0,t.jsx)(n.li,{children:"Real-time updates"}),"\n",(0,t.jsx)(n.li,{children:"Event visualization"}),"\n",(0,t.jsx)(n.li,{children:"Command transmission"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"dynamic-library-system",children:"Dynamic Library System"}),"\n",(0,t.jsx)(n.p,{children:"The GUI uses a robust dynamic library loading system:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'// Load a graphics library\nauto& libraryManager = LibraryManager::getInstance();\nauto graphicsLib = libraryManager.getInterface<IGraphicsLib>(\n    "plugins/libraylibcpp.so", "createGraphicsLib");\n'})}),"\n",(0,t.jsx)(n.h2,{id:"testing-strategy",children:"Testing Strategy"}),"\n",(0,t.jsx)(n.h3,{id:"unit-testing",children:"Unit Testing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Run all unit tests\nmake unit_tests\n\n# Run specific test suite\nmake test_server_network\nmake test_ai_pathfinding\nmake test_gui_renderer\n"})}),"\n",(0,t.jsx)(n.h3,{id:"integration-testing",children:"Integration Testing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Run full system integration test\nmake integration_test\n\n# Run specific scenario\n./tests/scenarios/incantation_test.sh\n./tests/scenarios/resource_collection_test.sh\n"})}),"\n",(0,t.jsx)(n.h3,{id:"memory-analysis",children:"Memory Analysis"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Check for memory leaks\nvalgrind --leak-check=full ./zappy_server -p 4242 -n team1 -x 20 -y 20\n"})}),"\n",(0,t.jsx)(n.h2,{id:"documentation",children:"Documentation"}),"\n",(0,t.jsx)(n.h3,{id:"code-documentation",children:"Code Documentation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"C/C++: Doxygen-style comments"}),"\n",(0,t.jsx)(n.li,{children:"Python: Google-style docstrings"}),"\n",(0,t.jsx)(n.li,{children:"All public APIs must be documented"}),"\n",(0,t.jsx)(n.li,{children:"Update documentation when changing interfaces"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"building-documentation",children:"Building Documentation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Generate code documentation\nmake docs\n\n# Generate protocol documentation\nmake protocol_docs\n\n# View documentation\nfirefox docs/html/index.html\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:"For more detailed information about specific components, refer to the architecture documentation and technical specifications."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);