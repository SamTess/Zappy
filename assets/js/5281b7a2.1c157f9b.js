"use strict";(self.webpackChunkdocs_docusaurus=self.webpackChunkdocs_docusaurus||[]).push([[2443],{936:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"architecture","title":"System Architecture","description":"Overview","source":"@site/docs/architecture.md","sourceDirName":".","slug":"/architecture","permalink":"/Zappy/docs/architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/Epitech/Zappy/tree/main/docs/docusaurus/docs/architecture.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Getting Started with Zappy","permalink":"/Zappy/docs/getting-started"},"next":{"title":"Development Guide","permalink":"/Zappy/docs/development-guide"}}');var s=i(4848),a=i(8453);const t={sidebar_position:2},l="System Architecture",c={},o=[{value:"Overview",id:"overview",level:2},{value:"Architecture Diagram",id:"architecture-diagram",level:2},{value:"Core Components",id:"core-components",level:2},{value:"1. Game Server (C)",id:"1-game-server-c",level:3},{value:"2. 3D Graphical Interface (C++)",id:"2-3d-graphical-interface-c",level:3},{value:"3. AI Client System (Python)",id:"3-ai-client-system-python",level:3},{value:"File Structure",id:"file-structure",level:2},{value:"Communication Protocols",id:"communication-protocols",level:2},{value:"Design Patterns",id:"design-patterns",level:2},{value:"Key Technologies",id:"key-technologies",level:2},{value:"Libraries",id:"libraries",level:2},{value:"Data Flow",id:"data-flow",level:2},{value:"Main Game Mechanisms",id:"main-game-mechanisms",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"system-architecture",children:"System Architecture"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"Zappy is a high-performance, multi-agent simulation platform built with a modular client-server architecture. The system enables real-time interaction between intelligent AI agents, a robust C server, and a modern 3D graphical interface."}),"\n",(0,s.jsx)(n.h2,{id:"architecture-diagram",children:"Architecture Diagram"}),"\n",(0,s.jsx)(n.mermaid,{value:'flowchart TB\n    subgraph "Client Layer"\n        subgraph "AI Agents (Python)"\n            AI1[Agent 1]\n            AI2[Agent 2]\n            AI3[Agent N]\n        end\n        subgraph "Visualization (C++)"\n            GUI[3D Interface]\n        end\n    end\n    subgraph "Server Layer (C)"\n        NET[Network Manager]\n        GAME[Game Engine]\n        MAP[Map Manager]\n        PLAYER[Player Manager]\n    end\n    subgraph "Data Layer"\n        WORLD[World State]\n        TEAMS[Team Data]\n        RESOURCES[Resource Map]\n    end\n    AI1 --\x3e|TCP Commands| NET\n    AI2 --\x3e|TCP Commands| NET\n    AI3 --\x3e|TCP Commands| NET\n    GUI --\x3e|State Queries| NET\n    NET --\x3e GAME\n    GAME --\x3e MAP\n    GAME --\x3e PLAYER\n    GAME --\x3e WORLD\n    PLAYER --\x3e TEAMS\n    MAP --\x3e RESOURCES\n    WORLD --\x3e|Updates| GUI\n    TEAMS --\x3e|Statistics| GUI\n    RESOURCES --\x3e|Visualization| GUI'}),"\n",(0,s.jsx)(n.h2,{id:"core-components",children:"Core Components"}),"\n",(0,s.jsx)(n.h3,{id:"1-game-server-c",children:"1. Game Server (C)"}),"\n",(0,s.jsx)(n.p,{children:"The server is the authoritative component managing all game logic and world state."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Responsibilities:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Real-time world simulation and physics"}),"\n",(0,s.jsx)(n.li,{children:"Multi-client network management (async I/O)"}),"\n",(0,s.jsx)(n.li,{children:"Game rule enforcement and validation"}),"\n",(0,s.jsx)(n.li,{children:"Resource distribution algorithms"}),"\n",(0,s.jsx)(n.li,{children:"Event broadcasting and state synchronization"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Key Modules:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Network Manager:"})," Handles client connections, command queues, and asynchronous I/O."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Map Manager:"})," Manages the world grid, resource spawning, and tile entities."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Player Manager:"})," Tracks player state, inventory, and actions."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"2-3d-graphical-interface-c",children:"2. 3D Graphical Interface (C++)"}),"\n",(0,s.jsx)(n.p,{children:"A modern, component-based architecture for real-time 3D visualization using Raylib/OpenGL. Features include:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Real-time rendering and camera controls"}),"\n",(0,s.jsx)(n.li,{children:"Dynamic library loading for graphics abstraction"}),"\n",(0,s.jsx)(n.li,{children:"Modular UI system"}),"\n",(0,s.jsx)(n.li,{children:"Performance optimizations (LOD, culling)"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"3-ai-client-system-python",children:"3. AI Client System (Python)"}),"\n",(0,s.jsx)(n.p,{children:"Sophisticated agent architecture with behavioral state machines and advanced AI algorithms:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Asynchronous network communication"}),"\n",(0,s.jsx)(n.li,{children:"Behavioral state machines for complex decision making"}),"\n",(0,s.jsx)(n.li,{children:"A* pathfinding and dynamic obstacle avoidance"}),"\n",(0,s.jsx)(n.li,{children:"Encrypted team communication"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"file-structure",children:"File Structure"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"src/Server/"})," \u2014 C server implementation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"src/GUI/"})," \u2014 C++ graphical interface"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"src/AI/"})," \u2014 Python AI client"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"src/Shared/"})," \u2014 Shared interfaces and dynamic library loader"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"communication-protocols",children:"Communication Protocols"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Server-AI Protocol:"})," Text-based commands, state synchronization, action costs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Server-GUI Protocol:"})," Specialized for visualization, real-time updates"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"design-patterns",children:"Design Patterns"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Observer:"})," GUI state updates"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Strategy:"})," Adaptive AI behaviors"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Command:"})," Server command processing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Factory:"})," Dynamic component creation"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"key-technologies",children:"Key Technologies"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Server:"})," C, POSIX sockets, event-driven model"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"GUI:"})," C++, Raylib, dynamic library loading"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"AI:"})," Python, asyncio, decision algorithms"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"libraries",children:"Libraries"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"RaylibCPP:"})," C++ wrapper for Raylib (3D rendering, input, camera)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"RayGUICPP:"})," C++ wrapper for raygui (UI widgets, dialogs)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"DLLoader:"})," Dynamic library loader for modularity"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"data-flow",children:"Data Flow"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Server \u2192 AI:"})," Game state, action results"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"AI \u2192 Server:"})," Player commands"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Server \u2192 GUI:"})," Full game state for visualization"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"GUI \u2192 Server:"})," Information requests only"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"main-game-mechanisms",children:"Main Game Mechanisms"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Player Lifecycle:"})," Connect, join team, explore, collect, evolve, possible death by starvation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Resource Generation:"})," Randomized, periodic, type-dependent"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Energy System:"})," Players consume food over time; starvation leads to death"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Player Communication:"})," Broadcast system with directional context"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"This document provides a technical overview of Zappy's architecture. For detailed protocol and module documentation, see the dedicated sections."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);