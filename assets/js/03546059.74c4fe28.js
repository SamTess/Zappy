"use strict";(self.webpackChunkdocs_docusaurus=self.webpackChunkdocs_docusaurus||[]).push([[4651],{1483:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"ai/index","title":"AI Client","description":"The AI client is an autonomous player that connects to the Zappy server and makes decisions to play the game independently, optimizing resource collection, team coordination, and progression through levels.","source":"@site/docs/ai/index.md","sourceDirName":"ai","slug":"/ai/","permalink":"/Zappy/docs/ai/","draft":false,"unlisted":false,"editUrl":"https://github.com/Epitech/Zappy/tree/main/docs/docusaurus/docs/ai/index.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1}}');var r=i(4848),t=i(8453);const l={sidebar_position:1},o="AI Client",c={},a=[{value:"Features",id:"features",level:2},{value:"Core Architecture",id:"core-architecture",level:2},{value:"AI Strategies",id:"ai-strategies",level:2},{value:"States and Transitions",id:"states-and-transitions",level:2},{value:"Team Communication",id:"team-communication",level:2},{value:"Technical Implementation",id:"technical-implementation",level:2},{value:"Key Files",id:"key-files",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"ai-client",children:"AI Client"})}),"\n",(0,r.jsx)(n.p,{children:"The AI client is an autonomous player that connects to the Zappy server and makes decisions to play the game independently, optimizing resource collection, team coordination, and progression through levels."}),"\n",(0,r.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Full TCP/IP connectivity with the Zappy server"}),"\n",(0,r.jsx)(n.li,{children:"Environment analysis and world state tracking"}),"\n",(0,r.jsx)(n.li,{children:"Decision-making based on game state and objectives"}),"\n",(0,r.jsx)(n.li,{children:"Advanced resource management system"}),"\n",(0,r.jsx)(n.li,{children:"Team coordination through encrypted broadcast messages"}),"\n",(0,r.jsx)(n.li,{children:"Multi-state behavior with adaptive transitions"}),"\n",(0,r.jsx)(n.li,{children:"Pathfinding with A* algorithm optimized for toroidal maps"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"core-architecture",children:"Core Architecture"}),"\n",(0,r.jsx)(n.p,{children:"Each AI client follows an agent-based architecture comprising:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Perception Module"}),": Processes and interprets server information"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Look command interpretation"}),"\n",(0,r.jsx)(n.li,{children:"Inventory tracking"}),"\n",(0,r.jsx)(n.li,{children:"Broadcast message decoding"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Decision Module"}),": Determines optimal actions"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"State machine with hierarchical behaviors"}),"\n",(0,r.jsx)(n.li,{children:"Priority-based action selection"}),"\n",(0,r.jsx)(n.li,{children:"Resource allocation algorithms"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Action Module"}),": Executes selected commands"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Command scheduling and queuing"}),"\n",(0,r.jsx)(n.li,{children:"Action failure handling"}),"\n",(0,r.jsx)(n.li,{children:"Action cost optimization"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"State Manager"}),": Maintains internal representation of game world"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Tile-based world map model"}),"\n",(0,r.jsx)(n.li,{children:"Resource availability tracking"}),"\n",(0,r.jsx)(n.li,{children:"Team member position tracking"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"ai-strategies",children:"AI Strategies"}),"\n",(0,r.jsx)(n.p,{children:"The AI implements several sophisticated strategies:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Resource Collection"}),": Optimized algorithms for finding and gathering needed resources"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Level Progression"}),": Calculations to determine the most efficient path to level up"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Exploration"}),": Map discovery with minimal redundancy"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Team Coordination"}),": Synchronized actions with other team members"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"states-and-transitions",children:"States and Transitions"}),"\n",(0,r.jsx)(n.p,{children:"The agent utilizes multiple primary states:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Exploration"}),": Searching for food and resources"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Collection"}),": Gathering identified resources"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Assembly"}),": Finding other players for incantation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Incantation"}),": Performing level-up ritual"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Emergency"}),": High-priority state when food is low"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"team-communication",children:"Team Communication"}),"\n",(0,r.jsx)(n.p,{children:"Agents communicate via the server's broadcast mechanism using a secure protocol:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Prefix"}),": Team identifier with encryption"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Message Type"}),": Action, Request, Information, Coordination"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Content"}),": Type-specific data payload"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Encryption"}),": AES-based team-specific encryption"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"technical-implementation",children:"Technical Implementation"}),"\n",(0,r.jsx)(n.p,{children:"The AI client is implemented in Python with these key technical features:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Asynchronous Operation"}),": Uses Python's asyncio for non-blocking communication"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cryptography"}),": Implements AES encryption for team communication"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Memory-Efficient Design"}),": Optimized data structures for world representation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Logging System"}),": Comprehensive debug and performance tracking"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Error Recovery"}),": Robust error handling and reconnection logic"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"key-files",children:"Key Files"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"main.py"}),": Program entry point and argument parsing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"agent/agent.py"}),": Primary agent implementation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"agent/state_machine.py"}),": State management system"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"agent/behaviors.py"}),": Behavior implementations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"utils/pathfinder.py"}),": A* pathfinding algorithm"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"utils/world_map.py"}),": Internal world representation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"utils/communication.py"}),": Team broadcast utilities"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"utils/zappy.py"}),": Server communication interface"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"logger/logger.py"}),": Logging system"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:["For detailed implementation specifics, refer to the source code in ",(0,r.jsx)(n.code,{children:"src/AI/"})," and the API documentation."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);