"use strict";(self.webpackChunkdocs_docusaurus=self.webpackChunkdocs_docusaurus||[]).push([[6039],{3078:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>a,frontMatter:()=>d,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"protocols/server-gui","title":"Server-GUI Protocol","description":"Overview","source":"@site/docs/protocols/server-gui.md","sourceDirName":"protocols","slug":"/protocols/server-gui","permalink":"/Zappy/docs/protocols/server-gui","draft":false,"unlisted":false,"editUrl":"https://github.com/Epitech/Zappy/tree/main/docs/docusaurus/docs/protocols/server-gui.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Server-AI Protocol","permalink":"/Zappy/docs/protocols/server-ai"}}');var r=i(4848),t=i(8453);const d={sidebar_position:2},l="Server-GUI Protocol",c={},o=[{value:"Overview",id:"overview",level:2},{value:"Connection Process",id:"connection-process",level:2},{value:"Message Format",id:"message-format",level:2},{value:"Initial Information Sequence",id:"initial-information-sequence",level:2},{value:"GUI Command Reference",id:"gui-command-reference",level:2},{value:"Server Notifications",id:"server-notifications",level:2},{value:"Resource Identification",id:"resource-identification",level:2},{value:"Player Orientation",id:"player-orientation",level:2},{value:"Technical Details",id:"technical-details",level:2},{value:"Time Unit Control",id:"time-unit-control",level:3},{value:"Map Coordinates",id:"map-coordinates",level:3},{value:"Connection Behavior",id:"connection-behavior",level:3},{value:"Protocol Extension Points",id:"protocol-extension-points",level:3},{value:"Implementation Guidelines",id:"implementation-guidelines",level:2},{value:"Parsing Strategy",id:"parsing-strategy",level:3},{value:"Connection Recovery",id:"connection-recovery",level:3}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"server-gui-protocol",children:"Server-GUI Protocol"})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"This document details the communication protocol between the Zappy server and the graphical interface (GUI). The protocol uses text-based exchanges over TCP/IP that allow the GUI to visualize the game state in real-time with minimal impact on gameplay."}),"\n",(0,r.jsx)(n.h2,{id:"connection-process",children:"Connection Process"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"TCP Connection"}),": The GUI establishes a TCP connection to the server"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Client Identification"}),": GUI sends the command: ",(0,r.jsx)(n.code,{children:"GRAPHIC\\n"})," to identify itself as a graphical client"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Initial State"}),": The server responds with comprehensive information about the current game state"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"message-format",children:"Message Format"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["All commands and responses are terminated with a newline character (",(0,r.jsx)(n.code,{children:"\\n"}),")"]}),"\n",(0,r.jsx)(n.li,{children:"The GUI primarily receives updates but can make specific information requests"}),"\n",(0,r.jsx)(n.li,{children:"Unlike AI clients, GUI commands are processed immediately with no time cost"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"initial-information-sequence",children:"Initial Information Sequence"}),"\n",(0,r.jsxs)(n.p,{children:["After connecting with the ",(0,r.jsx)(n.code,{children:"GRAPHIC"})," command, the server sends the following information in sequence:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Map Dimensions"}),": ",(0,r.jsx)(n.code,{children:"msz X Y\\n"})," (width X, height Y)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Time Unit"}),": ",(0,r.jsx)(n.code,{children:"sgt T\\n"})," (time unit in milliseconds)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Tile Contents"}),": ",(0,r.jsx)(n.code,{children:"bct X Y q0 q1 q2 q3 q4 q5 q6\\n"})," (for each tile)","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"q0: food quantity"}),"\n",(0,r.jsx)(n.li,{children:"q1-q6: quantities of each resource type"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Team Names"}),": ",(0,r.jsx)(n.code,{children:"tna N\\n"})," (for each team name N)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Player Information"}),": ",(0,r.jsx)(n.code,{children:"pnw # X Y O L N\\n"})," (for each player)","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"#: Player ID"}),"\n",(0,r.jsx)(n.li,{children:"X, Y: Coordinates"}),"\n",(0,r.jsx)(n.li,{children:"O: Orientation (1-4)"}),"\n",(0,r.jsx)(n.li,{children:"L: Level (1-8)"}),"\n",(0,r.jsx)(n.li,{children:"N: Team name"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"gui-command-reference",children:"GUI Command Reference"}),"\n",(0,r.jsx)(n.p,{children:"The GUI can send the following commands to request specific information:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Command"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"Response Format"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"msz"})}),(0,r.jsx)(n.td,{children:"Request map dimensions"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"msz X Y\\n"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"bct X Y"})}),(0,r.jsx)(n.td,{children:"Request tile content"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"bct X Y q0 q1 q2 q3 q4 q5 q6\\n"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"mct"})}),(0,r.jsx)(n.td,{children:"Request all tile contents"}),(0,r.jsxs)(n.td,{children:["Series of ",(0,r.jsx)(n.code,{children:"bct"})," responses"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"tna"})}),(0,r.jsx)(n.td,{children:"Request team names"}),(0,r.jsxs)(n.td,{children:["Series of ",(0,r.jsx)(n.code,{children:"tna N\\n"})," responses"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ppo #"})}),(0,r.jsx)(n.td,{children:"Request player position"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ppo # X Y O\\n"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"plv #"})}),(0,r.jsx)(n.td,{children:"Request player level"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"plv # L\\n"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pin #"})}),(0,r.jsx)(n.td,{children:"Request player inventory"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pin # X Y q0 q1 q2 q3 q4 q5 q6\\n"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sgt"})}),(0,r.jsx)(n.td,{children:"Request time unit"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sgt T\\n"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sst T"})}),(0,r.jsx)(n.td,{children:"Modify time unit"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sst T\\n"})})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"server-notifications",children:"Server Notifications"}),"\n",(0,r.jsx)(n.p,{children:"The server proactively sends notifications about game events to the GUI:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Notification"}),(0,r.jsx)(n.th,{children:"Format"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"Parameters"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Player Events"})}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"New player"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pnw # X Y O L N\\n"})}),(0,r.jsx)(n.td,{children:"Player connects"}),(0,r.jsx)(n.td,{children:"#: ID, X/Y: pos, O: orientation, L: level, N: team"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Player position"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ppo # X Y O\\n"})}),(0,r.jsx)(n.td,{children:"Player moves/turns"}),(0,r.jsx)(n.td,{children:"#: ID, X/Y: pos, O: orientation"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Player level"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"plv # L\\n"})}),(0,r.jsx)(n.td,{children:"Level changes"}),(0,r.jsx)(n.td,{children:"#: ID, L: new level"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Player inventory"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pin # X Y q0 q1 q2 q3 q4 q5 q6\\n"})}),(0,r.jsx)(n.td,{children:"Inventory changes"}),(0,r.jsx)(n.td,{children:"#: ID, X/Y: pos, q0-q6: resource quantities"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Player expulsion"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pex #\\n"})}),(0,r.jsx)(n.td,{children:"Player ejected"}),(0,r.jsx)(n.td,{children:"#: ID of expelled player"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Player broadcast"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pbc # M\\n"})}),(0,r.jsx)(n.td,{children:"Player broadcasts"}),(0,r.jsx)(n.td,{children:"#: ID, M: message text"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Player death"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pdi #\\n"})}),(0,r.jsx)(n.td,{children:"Player dies"}),(0,r.jsx)(n.td,{children:"#: ID of dead player"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Egg Events"})}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Egg laying"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pfk #\\n"})}),(0,r.jsx)(n.td,{children:"Player creates egg"}),(0,r.jsx)(n.td,{children:"#: ID of player laying egg"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Egg laid"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"enw # X Y N\\n"})}),(0,r.jsx)(n.td,{children:"Egg is created"}),(0,r.jsx)(n.td,{children:"#: egg ID, X/Y: pos, N: team name"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Egg collection"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ebo #\\n"})}),(0,r.jsx)(n.td,{children:"Egg hatches into player"}),(0,r.jsx)(n.td,{children:"#: ID of hatched egg"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Egg death"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"edi #\\n"})}),(0,r.jsx)(n.td,{children:"Egg expires"}),(0,r.jsx)(n.td,{children:"#: ID of dead egg"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Incantation Events"})}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Start incantation"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pic X Y L #n\\n"})}),(0,r.jsx)(n.td,{children:"Ritual begins"}),(0,r.jsx)(n.td,{children:"X/Y: pos, L: level, #n: list of player IDs"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"End incantation"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pie X Y R\\n"})}),(0,r.jsx)(n.td,{children:"Ritual completes"}),(0,r.jsxs)(n.td,{children:["X/Y: pos, R: result (0",":fail",", 1",":success",")"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Resource Events"})}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Tile content"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"bct X Y q0 q1 q2 q3 q4 q5 q6\\n"})}),(0,r.jsx)(n.td,{children:"Resource change"}),(0,r.jsx)(n.td,{children:"X/Y: pos, q0-q6: resource quantities"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Game Events"})}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"End of game"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"seg N\\n"})}),(0,r.jsx)(n.td,{children:"Game ends"}),(0,r.jsx)(n.td,{children:"N: winning team name"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Server message"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"smg M\\n"})}),(0,r.jsx)(n.td,{children:"Server notification"}),(0,r.jsx)(n.td,{children:"M: message text"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Time unit change"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sgt T\\n"})}),(0,r.jsx)(n.td,{children:"Time unit updated"}),(0,r.jsx)(n.td,{children:"T: new time unit value"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"resource-identification",children:"Resource Identification"}),"\n",(0,r.jsx)(n.p,{children:"Resource quantities in tile content and inventory messages follow this order:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"q0: Food"}),"\n",(0,r.jsx)(n.li,{children:"q1: Linemate"}),"\n",(0,r.jsx)(n.li,{children:"q2: Deraumere"}),"\n",(0,r.jsx)(n.li,{children:"q3: Sibur"}),"\n",(0,r.jsx)(n.li,{children:"q4: Mendiane"}),"\n",(0,r.jsx)(n.li,{children:"q5: Phiras"}),"\n",(0,r.jsx)(n.li,{children:"q6: Thystame"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"player-orientation",children:"Player Orientation"}),"\n",(0,r.jsx)(n.p,{children:"Orientation values in player position messages:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"North (top of map)"}),"\n",(0,r.jsx)(n.li,{children:"East (right of map)"}),"\n",(0,r.jsx)(n.li,{children:"South (bottom of map)"}),"\n",(0,r.jsx)(n.li,{children:"West (left of map)"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"technical-details",children:"Technical Details"}),"\n",(0,r.jsx)(n.h3,{id:"time-unit-control",children:"Time Unit Control"}),"\n",(0,r.jsx)(n.p,{children:"The GUI has limited ability to affect the game by modifying the server's time unit:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"sst T\\n"}),": Set the time unit to T milliseconds"]}),"\n",(0,r.jsx)(n.li,{children:"Valid range: 2 to 10000 milliseconds"}),"\n",(0,r.jsx)(n.li,{children:"Lower values = faster game pace"}),"\n",(0,r.jsx)(n.li,{children:"Default is typically 100 milliseconds"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"map-coordinates",children:"Map Coordinates"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Coordinates are zero-based, starting from the top-left"}),"\n",(0,r.jsx)(n.li,{children:"X increases from left to right (0 to width-1)"}),"\n",(0,r.jsx)(n.li,{children:"Y increases from top to bottom (0 to height-1)"}),"\n",(0,r.jsx)(n.li,{children:"The map is toroidal (wraps around edges)"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"connection-behavior",children:"Connection Behavior"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Multiple GUI clients can connect simultaneously"}),"\n",(0,r.jsx)(n.li,{children:"If the server is full, GUI clients can still connect (unlike AI clients)"}),"\n",(0,r.jsx)(n.li,{children:"The GUI connection does not count against team player limits"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"protocol-extension-points",children:"Protocol Extension Points"}),"\n",(0,r.jsx)(n.p,{children:"The protocol allows for future extensions:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Additional notification types can be added with new codes"}),"\n",(0,r.jsx)(n.li,{children:"The server ignores unknown commands from the GUI"}),"\n",(0,r.jsx)(n.li,{children:"The GUI should ignore unknown notifications from the server"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"implementation-guidelines",children:"Implementation Guidelines"}),"\n",(0,r.jsx)(n.h3,{id:"parsing-strategy",children:"Parsing Strategy"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Parse notifications by their prefix (first 3 characters)"}),"\n",(0,r.jsx)(n.li,{children:"Extract parameters based on the notification type"}),"\n",(0,r.jsx)(n.li,{children:"Update local game state accordingly"}),"\n",(0,r.jsx)(n.li,{children:"Trigger appropriate visualization updates"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"connection-recovery",children:"Connection Recovery"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"If connection is lost, attempt to reconnect"}),"\n",(0,r.jsxs)(n.li,{children:["Upon reconnection, identify as GUI again with ",(0,r.jsx)(n.code,{children:"GRAPHIC\\n"})]}),"\n",(0,r.jsx)(n.li,{children:"The server will resend the complete game state"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"This protocol documentation provides a comprehensive reference for developers implementing the GUI client for the Zappy server. For implementation guidance, refer to the GUI architecture documentation."})]})}function a(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);