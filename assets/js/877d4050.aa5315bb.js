"use strict";(self.webpackChunkdocs_docusaurus=self.webpackChunkdocs_docusaurus||[]).push([[78],{8396:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"server/index","title":"Zappy Server","description":"The server is the core component of the Zappy project, responsible for managing game state, enforcing rules, simulating the world, and coordinating communication between AI clients and the graphical interface.","source":"@site/docs/server/index.md","sourceDirName":"server","slug":"/server/","permalink":"/Zappy/docs/server/","draft":false,"unlisted":false,"editUrl":"https://github.com/Epitech/Zappy/tree/main/docs/docusaurus/docs/server/index.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1}}');var s=r(4848),t=r(8453);const a={sidebar_position:1},l="Zappy Server",c={},o=[{value:"Architecture Overview",id:"architecture-overview",level:2},{value:"Server Configuration",id:"server-configuration",level:2},{value:"Internal Architecture",id:"internal-architecture",level:2},{value:"Event-Driven Architecture",id:"event-driven-architecture",level:3},{value:"Time Management",id:"time-management",level:3},{value:"Command Processing Pipeline",id:"command-processing-pipeline",level:3},{value:"Resource Management",id:"resource-management",level:2},{value:"Distribution Algorithm",id:"distribution-algorithm",level:3},{value:"Player Lifecycle Management",id:"player-lifecycle-management",level:2},{value:"Team Management",id:"team-management",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Memory Management",id:"memory-management",level:3},{value:"Concurrency Control",id:"concurrency-control",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"File Structure",id:"file-structure",level:2}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"zappy-server",children:"Zappy Server"})}),"\n",(0,s.jsx)(n.p,{children:"The server is the core component of the Zappy project, responsible for managing game state, enforcing rules, simulating the world, and coordinating communication between AI clients and the graphical interface."}),"\n",(0,s.jsx)(n.h2,{id:"architecture-overview",children:"Architecture Overview"}),"\n",(0,s.jsx)(n.p,{children:"The Zappy server is built with a modular, high-performance architecture:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Network Manager"}),": Handles client connections, message parsing, and async I/O"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Game Engine"}),": Implements core game logic, rules, and state transitions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Map System"}),": Manages the game world, resource distribution, and spatial queries"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Player Manager"}),": Tracks player states, teams, and action processing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Command Processor"}),": Parses and executes client commands with proper timing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Resource System"}),": Controls resource generation, distribution, and consumption"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"server-configuration",children:"Server Configuration"}),"\n",(0,s.jsx)(n.p,{children:"The server accepts the following command-line parameters for flexible deployment:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameter"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Default"}),(0,s.jsx)(n.th,{children:"Range/Format"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"-p"})}),(0,s.jsx)(n.td,{children:"Port number"}),(0,s.jsx)(n.td,{children:"4242"}),(0,s.jsx)(n.td,{children:"1024-65535"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"-x"})}),(0,s.jsx)(n.td,{children:"Map width"}),(0,s.jsx)(n.td,{children:"20"}),(0,s.jsx)(n.td,{children:"10-100"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"-y"})}),(0,s.jsx)(n.td,{children:"Map height"}),(0,s.jsx)(n.td,{children:"20"}),(0,s.jsx)(n.td,{children:"10-100"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"-n"})}),(0,s.jsx)(n.td,{children:"Team names (space-separated)"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.em,{children:"Required"})}),(0,s.jsx)(n.td,{children:"String identifiers"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"-c"})}),(0,s.jsx)(n.td,{children:"Maximum clients per team"}),(0,s.jsx)(n.td,{children:"10"}),(0,s.jsx)(n.td,{children:"1-100"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"-f"})}),(0,s.jsx)(n.td,{children:"Execution frequency (ticks per second)"}),(0,s.jsx)(n.td,{children:"100"}),(0,s.jsx)(n.td,{children:"2-10000"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"-t"})}),(0,s.jsx)(n.td,{children:"Initial food regeneration interval (ticks)"}),(0,s.jsx)(n.td,{children:"20"}),(0,s.jsx)(n.td,{children:"1-1000"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"-r"})}),(0,s.jsx)(n.td,{children:"Initial resource regeneration rate"}),(0,s.jsx)(n.td,{children:"20"}),(0,s.jsx)(n.td,{children:"1-100"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"-d"})}),(0,s.jsx)(n.td,{children:"Debug mode (verbose logging)"}),(0,s.jsx)(n.td,{children:"Off"}),(0,s.jsx)(n.td,{children:"Flag"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"internal-architecture",children:"Internal Architecture"}),"\n",(0,s.jsx)(n.p,{children:"The server employs several key architectural patterns:"}),"\n",(0,s.jsx)(n.h3,{id:"event-driven-architecture",children:"Event-Driven Architecture"}),"\n",(0,s.jsx)(n.p,{children:"The server uses an event-driven model with asynchronous I/O to handle multiple clients efficiently:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"// Core event loop\nwhile (server->running) {\n    // Monitor file descriptors for activity\n    int activity = poll(server->poll_manager->pollfds, server->poll_manager->nfds, -1);\n    \n    if (activity < 0) {\n        // Handle polling error\n        continue;\n    }\n    \n    // Check for new client connections\n    if (FD_ISSET(server_fd, &readfds)) {\n        handle_new_connection(server);\n    }\n    \n    // Process client events\n    for (int i = 0; i < server->nfds; i++) {\n        if (server->poll_manager->pollfds[i].revents & POLLIN) {\n            process_client_input(server, &server->clients[i]);\n        }\n        if (server->poll_manager->pollfds[i].revents & POLLOUT) {\n            send_client_responses(server, &server->clients[i]);\n        }\n    }\n    \n    // Update game state\n    update_game_state(server);\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"time-management",children:"Time Management"}),"\n",(0,s.jsx)(n.p,{children:"The server uses a sophisticated time management system to ensure consistent gameplay:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"typedef struct time_manager_s {\n    int frequency;              // Ticks per second\n    double tick_duration_ms;    // Milliseconds per tick\n    uint64_t current_tick;      // Current game time\n    uint64_t last_update;       // Timestamp of last update\n    struct timeval last_time;   // System time of last update\n} time_manager_t;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"command-processing-pipeline",children:"Command Processing Pipeline"}),"\n",(0,s.jsx)(n.p,{children:"Commands from clients are processed through a multi-stage pipeline:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Reception"}),": Network layer receives raw text commands"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Parsing"}),": Commands are parsed into structured data"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Validation"}),": Command syntax and parameters are validated"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Scheduling"}),": Valid commands are scheduled for execution"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Execution"}),": Commands are executed in the game world"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Response"}),": Results are sent back to clients"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"resource-management",children:"Resource Management"}),"\n",(0,s.jsx)(n.p,{children:"The server implements sophisticated algorithms for resource distribution:"}),"\n",(0,s.jsx)(n.h3,{id:"distribution-algorithm",children:"Distribution Algorithm"}),"\n",(0,s.jsx)(n.p,{children:"Resources are distributed using a parameterized algorithm that ensures:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Even distribution across the map"}),"\n",(0,s.jsx)(n.li,{children:"Controlled rarity for higher-tier resources"}),"\n",(0,s.jsx)(n.li,{children:"Regeneration based on server time and consumption rates"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"void regenerate_resources(map_t *map, resource_config_t *config) {\n    // Calculate number of resources to add based on map size and config\n    int food_to_add = (map->width * map->height * config->food_density) / 100;\n    \n    // Distribute resources with probability weighting\n    for (int y = 0; y < map->height; y++) {\n        for (int x = 0; x < map->width; x++) {\n            tile_t *tile = &map->tiles[y][x];\n            \n            // Probability decreases with resource tier\n            if (rand() % 100 < config->food_probability) {\n                tile->food += 1;\n            }\n            if (rand() % 100 < config->linemate_probability) {\n                tile->linemate += 1;\n            }\n            // ... other resources with decreasing probabilities\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"player-lifecycle-management",children:"Player Lifecycle Management"}),"\n",(0,s.jsx)(n.p,{children:"The server tracks player lifecycle from connection to death:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Connection"}),": TCP connection established"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Authentication"}),": Team selection and validation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Initialization"}),": Player state creation and map placement"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Active State"}),": Command processing and state updates"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Death"}),": Food depletion or disconnection handling"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Resource Recovery"}),": Inventory dropped on tile"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"team-management",children:"Team Management"}),"\n",(0,s.jsx)(n.p,{children:"Teams have specific properties and limitations:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"typedef struct team_s {\n    char *name;                  // Team identifier\n    int max_clients;             // Maximum players allowed\n    int connected_clients;       // Current player count\n    client_t **clients;          // Array of client pointers\n    int eggs_count;              // Available egg count\n    egg_t **eggs;                // Array of egg pointers\n} team_t;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,s.jsx)(n.h3,{id:"memory-management",children:"Memory Management"}),"\n",(0,s.jsx)(n.p,{children:"The server implements careful memory management to prevent leaks:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'// Resource allocation\nvoid* zappy_malloc(size_t size) {\n    void *ptr = malloc(size);\n    if (!ptr) {\n        server_error("Memory allocation failed");\n        exit(EXIT_FAILURE);\n    }\n    return ptr;\n}\n\n// Resource cleanup\nvoid cleanup_server(server_t *server) {\n    // Free all dynamically allocated resources\n    cleanup_clients(server->clients, server->nfds);\n    cleanup_map(server->map);\n    cleanup_teams(server->teams, server->team_count);\n    \n    // Close socket connections\n    for (int i = 0; i < server->nfds; i++) {\n        close(server->poll_manager->pollfds[i].fd);\n    }\n    \n    free(server->poll_manager);\n    free(server);\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"concurrency-control",children:"Concurrency Control"}),"\n",(0,s.jsx)(n.p,{children:"The server uses a single-threaded event loop with non-blocking I/O to avoid race conditions while maintaining high performance."}),"\n",(0,s.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(n.p,{children:"Comprehensive error handling ensures server stability:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'void handle_server_error(server_t *server, const char *message, int error_code) {\n    // Log the error\n    log_error("[SERVER] %s (Error %d: %s)", message, error_code, strerror(error_code));\n    \n    // Attempt recovery based on error type\n    switch (error_code) {\n        case ECONNRESET:\n            // Client disconnected unexpectedly\n            handle_client_disconnect(server, find_client_by_error(server));\n            break;\n        case EAGAIN:\n            // Resource temporarily unavailable, retry later\n            break;\n        // ... other error cases\n        default:\n            // Unrecoverable error\n            if (error_code > ERROR_THRESHOLD) {\n                log_critical("Fatal error, shutting down server");\n                server->running = false;\n            }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,s.jsx)(n.p,{children:"The server includes optimizations for handling large maps and many clients:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Spatial Partitioning"}),": Grid-based spatial indexing for efficient queries"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Command Batching"}),": Processing commands in batches for efficiency"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Response Buffering"}),": Buffering outgoing messages to reduce system calls"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Memory Pooling"}),": Reusing memory allocations for common operations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Efficient Data Structures"}),": Custom data structures for game state"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"file-structure",children:"File Structure"}),"\n",(0,s.jsx)(n.p,{children:"The server code is organized into logical modules:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"src/Server/\n  \u251c\u2500\u2500 main.c               # Entry point\n  \u251c\u2500\u2500 include/             # Header files\n  \u2502   \u251c\u2500\u2500 server.h         # Main server definitions\n  \u2502   \u251c\u2500\u2500 map.h            # Map system definitions\n  \u2502   \u2514\u2500\u2500 ...\n  \u251c\u2500\u2500 network/             # Network handling\n  \u2502   \u251c\u2500\u2500 socket.c         # Socket operations\n  \u2502   \u2514\u2500\u2500 client.c         # Client handling\n  \u251c\u2500\u2500 map/                 # Map management\n  \u2502   \u251c\u2500\u2500 map.c            # Map operations\n  \u2502   \u2514\u2500\u2500 resource.c       # Resource management\n  \u251c\u2500\u2500 player/              # Player management\n  \u2502   \u251c\u2500\u2500 player.c         # Player operations\n  \u2502   \u2514\u2500\u2500 team.c           # Team operations\n  \u251c\u2500\u2500 command/             # Command processing\n  \u2502   \u251c\u2500\u2500 command.c        # Command handler\n  \u2502   \u2514\u2500\u2500 ...              # Individual command implementations\n  \u2514\u2500\u2500 util/                # Utilities\n      \u251c\u2500\u2500 logger.c         # Logging system\n      \u2514\u2500\u2500 memory.c         # Memory management\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"For more detailed information about specific server components and protocols, refer to the server components documentation and protocol specifications."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);